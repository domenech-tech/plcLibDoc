"use strict";(self.webpackChunkplc_lib_docusaurus_git=self.webpackChunkplc_lib_docusaurus_git||[]).push([[344],{6302:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>E});var r=n(6687);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,E=u["".concat(i,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(E,l(l({ref:t},p),{},{components:n})):r.createElement(E,l({ref:t},p))}));function E(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7755:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(4227),o=(n(6687),n(6302));const a={},l=void 0,s={unversionedId:"Common/setMode",id:"Common/setMode",title:"setMode",description:"Description",source:"@site/docs/Common/setMode.md",sourceDirName:"Common",slug:"/Common/setMode",permalink:"/plcLibDoc/docs/Common/setMode",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Common/setMode.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Abbreviations",permalink:"/plcLibDoc/docs/Appendix/Abbreviations"},next:{title:"valve",permalink:"/plcLibDoc/docs/Devices/valve"}},i={},c=[{value:"Description",id:"description",level:2},{value:"Base code",id:"base-code",level:2},{value:"Siemens code",id:"siemens-code",level:2},{value:"Omron code",id:"omron-code",level:2},{value:"Codesys code",id:"codesys-code",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"This function is used to switch between automatic, manual and local mode "),(0,o.kt)("h2",{id:"base-code"},"Base code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Pascal"},"FUNCTION_BLOCK \"SetMode\"\n\nTITLE = SET OPERATION MODE\n{ S7_Optimized_Access := 'TRUE' }\nAUTHOR : JDF\nFAMILY : COMMON\nVERSION : 0.1\n//Set operation mode between automatic and manual\n\n\xa0 \xa0VAR_INPUT\n\xa0 \xa0 \xa0 liMode { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;\n\xa0 \xa0 \xa0 liAut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;\n\xa0 \xa0 \xa0 liMan { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;\n\xa0 \xa0END_VAR\n\n\xa0 \xa0VAR_OUTPUT\n\xa0 \xa0 \xa0 isAut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;\n\xa0 \xa0END_VAR\n\n   VAR_IN_OUT\n\xa0 \xa0 \xa0 opCmd { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Word;\n\xa0 \xa0END_VAR\n\n   VAR\n\xa0 \xa0 \xa0 statAut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;\n\xa0 \xa0 \xa0 statIsAut { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool;\n\xa0 \xa0END_VAR\n\n   VAR_TEMP\n\xa0 \xa0 \xa0 tmpSetAut : Bool;\n\xa0 \xa0 \xa0 tmpSetMan : Bool;\n\xa0 \xa0 \xa0 tmpOpAut : Bool;\n\xa0 \xa0 \xa0 tmpOpMan : Bool;\n\xa0 \xa0 \xa0 tmpIsAut : Bool;\n\xa0 \xa0END_VAR\n\n   VAR CONSTANT\n\xa0 \xa0 \xa0 OP_CMD_SETAUT : Word := 16#1;\n\xa0 \xa0 \xa0 OP_CMD_SETMAN : Word := 16#2;\n\xa0 \xa0END_VAR\n\nBEGIN\n\n\xa0 REGION Operator commands\n\xa0 \xa0 #tmpOpAut := (#opCmd = #OP_CMD_SETAUT);\n\xa0 \xa0 #tmpOpMan := (#opCmd = #OP_CMD_SETAUT);\n\xa0 END_REGION\n\n\xa0 REGION Effective command\n\xa0 \xa0 #tmpSetAut := #tmpOpAut AND (NOT #tmpOpMan);\n\xa0 \xa0 IF #liMode THEN\n\xa0 \xa0 \xa0 #tmpSetAut := #liAut AND (NOT #liMan);\n\xa0 \xa0 END_IF;\n\xa0 END_REGION\n\n\xa0 REGION Calc outputs\n\xa0 \xa0 #tmpIsAut := (#statIsAut OR #tmpSetAut) AND (NOT #tmpSetMan);\n\xa0 END_REGION\n\n\xa0 REGION Formal parameters\n\xa0 \xa0 #isAut := #tmpIsAut;\n\xa0 END_REGION\n\n\xa0 REGION Memories\n\xa0 \xa0 #statIsAut := #tmpIsAut;\n\xa0 END_REGION\n\n\xa0 REGION Reset operator commands\n\xa0 \xa0 #opCmd := 16#0000;\n\xa0 END_REGION\n\nEND_FUNCTION_BLOCK\n\n")),(0,o.kt)("h2",{id:"siemens-code"},"Siemens code"),(0,o.kt)("h2",{id:"omron-code"},"Omron code"),(0,o.kt)("h2",{id:"codesys-code"},"Codesys code"))}d.isMDXComponent=!0}}]);